import "../../../dataclasses/CDTMList/models/CDTMList.ed_dclass";
import "../../../dataclasses/CDTCHandler/models/CDTCHandler.ed_dclass";
import "../../../protocols/CPTMChannelCtrl/models/CPTMChannelCtrl.ed_prot";
import "../../../protocols/CPGuidanceCtrl/models/CPGuidanceCtrl.ed_prot";
import "../../../protocols/EDROOMTimingSAP/models/EDROOMTimingSAP.ed_prot";
import "../../../protocols/EDROOMServiceLibrary/models/EDROOMServiceLibrary.ed_prot";
import "../../../sais/icuasw_pus_services_iface_v1/models/icuasw_pus_services_iface_v1.ed_sai";



/**
 * \class   CCGuidance
 *
 */


proactive component CCGuidance{

	uri := es.uah.aut.srg.edroom.mclev.cmp.CCGuidance;
	version := v1;
	stack_size := 1024;
	def_max_nb_messages := 10;
	requires := icuasw_pus_services_iface(v1);




	structure {

		ports {


			system port EDROOMsl
			{
				id:= 0;
				protocol:= EDROOMServiceLibrary(v1);
			};
			external port GuidanceCtrl {
				id := 1;
				cardinality := 1;
				protocol := CPGuidanceCtrl(v1);

			};

			conjugated  external port TMChannelCtrl {
				id := 2;
				cardinality := 1;
				protocol := CPTMChannelCtrl(v1);

			};

			timing port GuidancePeriod {
				id := 3;
				protocol := EDROOMTimingSAP(v1);

			};



		};


		data pools {
			CDTMList(v1) CEDROOMPoolCDTMList[10];

		};


	};


	behaviour {

		contexts {


			context Top_0{


				id := 0;


				states {
					state I{
						id := 0;
					};
					state Ready{
						id := 1;
					};
				};


				init state := I;


				items{
					/**
					 * \brief  
					 */

					msgdatahandler FExecGuidanceTC {
						code {
							<code>
							 
							CDEventList TCExecEventList;  	
							  
							PUS_GuidanceTCExecutor::ExecTC(varSGuidance,VCurrentTMList,TCExecEventList);


							</code>
						};

						port :=GuidanceCtrl;

						message :=CPGuidanceCtrl(v1)::SGuidance;

					};

					/**
					 * \brief  
					 */

					inform at FGuidanceInit {
						code {
							<code>
							time.GetTime(); // Get current monotonic time   
							time+=Pr_Time(0,100000); // Add X sec + Y microsec    
							VNextTimeout=time;


							</code>
						};

						port :=GuidancePeriod;

						priority :=3;

					};

					/**
					 * \brief  
					 */

					invoke FInvokeTxTMList {
						code {
							<code>
								
									// Complete Data 
								
								*pSTxTM_Data=VCurrentTMList;    
								VCurrentTMList.Clear();


							</code>
						};

						port :=TMChannelCtrl;

						message :=CPTMChannelCtrl(v1)::STxTM;

						priority :=1;

					};

					/**
					 * \brief 
					 */

					inform at FDoGuidance {
						code {
							<code>
							VNextTimeout+= Pr_Time(0,100000); // Add X sec + Y microsec 
							time=VNextTimeout; 
							
							PUSService129::GuidanceControl();


							</code>
						};

						port :=GuidancePeriod;

						priority :=3;

					};


				};


				transitions{

					transition Init{
						id := 0;
						source := I;
						sink := Ready;


						actions := FGuidanceInit;


						asynchronous trigger {
							port := EDROOMsl;
							message := EDROOMServiceLibrary(v1)::EDROOMStart;
						};
					};

					transition ExecTC{
						id := 1;
						source := Ready;
						sink := Ready;


						msgdatahandler := FExecGuidanceTC;

						handshakes{
							handshake{
								invoke := FInvokeTxTMList;
							};
						};


						asynchronous trigger {
							port := GuidanceCtrl;
							message := CPGuidanceCtrl(v1)::SGuidance;
						};
					};

					transition DoGuidance{
						id := 2;
						source := Ready;
						sink := Ready;


						actions := FDoGuidance;

						handshakes{
							handshake{
								invoke := FInvokeTxTMList;
							};
						};


						asynchronous trigger {
							port := GuidancePeriod;
							message := EDROOMTimingSAP(v1)::EDROOMSignalTimeout;
						};
					};


				};


			};


		};

		top context := Top_0;


	};


};